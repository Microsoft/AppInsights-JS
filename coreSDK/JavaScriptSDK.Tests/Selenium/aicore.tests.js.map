{"version":3,"file":"aicore.tests.js","sourceRoot":"","sources":["../TestFramework/Assert.ts","../TestFramework/TestCase.ts","../TestFramework/TestClass.ts","../TestFramework/PollingAssert.ts","../TestFramework/Common.ts","../../JavaScriptSDK.Interfaces/ITelemetryItem.ts","../../JavaScriptSDK.Interfaces/IConfiguration.ts","../../JavaScriptSDK.Interfaces/ITelemetryPlugin.ts","../../JavaScriptSDK.Interfaces/IChannelControls.ts","../../JavaScriptSDK.Interfaces/IAppInsightsCore.ts","../../JavaScriptSDK/CoreUtils.ts","../../JavaScriptSDK/AppInsightsCore.ts","ApplicationInsightsCore.Tests.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../External/qunit.d.ts\" />\r\n\r\n/** Wrapper around QUnit asserts. This class has two purposes:\r\n * - Make Assertion methods easy to discover.\r\n * - Make them consistent with XUnit assertions in the order of the actual and expected parameter values.\r\n */\r\nclass Assert {\r\n    /**\r\n    * A deep recursive comparison assertion, working on primitive types, arrays, objects, \r\n    * regular expressions, dates and functions.\r\n    *\r\n    * The deepEqual() assertion can be used just like equal() when comparing the value of \r\n    * objects, such that { key: value } is equal to { key: value }. For non-scalar values, \r\n    * identity will be disregarded by deepEqual.\r\n    *\r\n    * @param expected Known comparison value\r\n    * @param actual Object or Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static deepEqual(expected: any, actual: any, message?: string): any {\r\n        return deepEqual(actual, expected, message);\r\n    }\r\n\r\n    /** \r\n    * A non-strict comparison assertion, roughly equivalent to JUnit assertEquals.\r\n    *\r\n    * The equal assertion uses the simple comparison operator (==) to compare the actual \r\n    * and expected arguments. When they are equal, the assertion passes: any; otherwise, it fails. \r\n    * When it fails, both actual and expected values are displayed in the test result, \r\n    * in addition to a given message.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static equal(expected: any, actual: any, message?: string): any {\r\n        return equal(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * An inverted deep recursive comparison assertion, working on primitive types, \r\n    * arrays, objects, regular expressions, dates and functions.\r\n    *\r\n    * The notDeepEqual() assertion can be used just like equal() when comparing the \r\n    * value of objects, such that { key: value } is equal to { key: value }. For non-scalar \r\n    * values, identity will be disregarded by notDeepEqual.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Object or Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static notDeepEqual(expected: any, actual: any, message?: string): any {\r\n        return notDeepEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * A non-strict comparison assertion, checking for inequality.\r\n    *\r\n    * The notEqual assertion uses the simple inverted comparison operator (!=) to compare \r\n    * the actual and expected arguments. When they aren't equal, the assertion passes: any; \r\n    * otherwise, it fails. When it fails, both actual and expected values are displayed \r\n    * in the test result, in addition to a given message.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static notEqual(expected: any, actual: any, message?: string): any {\r\n        return notEqual(actual, expected, message);\r\n    }\r\n\r\n    public static notPropEqual(expected: any, actual: any, message?: string): any {\r\n        return notPropEqual(actual, expected, message);\r\n    }\r\n\r\n    public static propEqual(expected: any, actual: any, message?: string): any {\r\n        return propEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * A non-strict comparison assertion, checking for inequality.\r\n    *\r\n    * The notStrictEqual assertion uses the strict inverted comparison operator (!==) \r\n    * to compare the actual and expected arguments. When they aren't equal, the assertion \r\n    * passes: any; otherwise, it fails. When it fails, both actual and expected values are \r\n    * displayed in the test result, in addition to a given message.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static notStrictEqual(expected: any, actual: any, message?: string): any {\r\n        return notStrictEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * A boolean assertion, equivalent to CommonJS's assert.ok() and JUnit's assertTrue(). \r\n    * Passes if the first argument is truthy.\r\n    *\r\n    * The most basic assertion in QUnit, ok() requires just one argument. If the argument \r\n    * evaluates to true, the assertion passes; otherwise, it fails. If a second message \r\n    * argument is provided, it will be displayed in place of the result.\r\n    * \r\n    * @param state Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static ok(state: any, message?: string): any {\r\n        return ok(state, message);\r\n    }\r\n\r\n    /**\r\n    * A strict type and value comparison assertion.\r\n    *\r\n    * The strictEqual() assertion provides the most rigid comparison of type and value with \r\n    * the strict equality operator (===)\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static strictEqual(expected: any, actual: any, message?: string): any {\r\n        return strictEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * Assertion to test if a callback throws an exception when run.\r\n    * \r\n    * When testing code that is expected to throw an exception based on a specific set of \r\n    * circumstances, use throws() to catch the error object for testing and comparison.\r\n    * \r\n    * @param block Function to execute\r\n    * @param expected Error Object to compare\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static throws(block: () => any, expected: any, message?: string): any;\r\n\r\n    /**\r\n    * @param block Function to execute\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static throws(block: () => any, message?: string): any;\r\n\r\n    public static throws(block: () => any, expected?: any, message?: string): any {\r\n        return throws(block, expected, message);\r\n    }\r\n}","\r\n/** Defines a test case */\r\nclass TestCase {\r\n    /** Name to use for the test case */\r\n    public name: string;\r\n\r\n    /** Test case method */\r\n    public test: () => void;\r\n}\r\n\r\n\r\n/** Defines a test case */\r\ninterface TestCaseAsync {\r\n    /** Name to use for the test case */\r\n    name: string;\r\n\r\n    /** time to wait after pre before invoking post and calling start() */\r\n    stepDelay: number;\r\n\r\n    /** async steps */\r\n    steps: Array<() => void>;\r\n}","/// <reference path=\"../External/sinon.d.ts\" />\r\n/// <reference path=\"../External/qunit.d.ts\" />\r\n/// <reference path=\"Assert.ts\" />\r\n/// <reference path=\"./TestCase.ts\"/>\r\n\r\nclass TestClass {\r\n\r\n    constructor(name?: string) {\r\n        QUnit.module(name);\r\n    }\r\n\r\n    public static isPollingStepFlag = \"isPollingStep\";\r\n\r\n    /** The instance of the currently running suite. */\r\n    public static currentTestClass: TestClass;\r\n\r\n    /** Turns on/off sinon's syncronous implementation of setTimeout. On by default. */\r\n    public useFakeTimers: boolean = true;\r\n\r\n    /** Turns on/off sinon's fake implementation of XMLHttpRequest. On by default. */\r\n    public useFakeServer: boolean = true;\r\n\r\n    /** Method called before the start of each test method */\r\n    public testInitialize() {\r\n    }\r\n\r\n    /** Method called after each test method has completed */\r\n    public testCleanup() {\r\n    }\r\n\r\n    /** Method in which test class intances should call this.testCase(...) to register each of this suite's tests. */\r\n    public registerTests() {\r\n    }\r\n\r\n    /** Register an async Javascript unit testcase. */\r\n    public testCaseAsync(testInfo: TestCaseAsync) {\r\n        if (!testInfo.name) {\r\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\r\n        }\r\n\r\n        if (isNaN(testInfo.stepDelay)) {\r\n            throw new Error(\"Must specify 'stepDelay' period between pre and post\");\r\n        }\r\n\r\n        if (!testInfo.steps) {\r\n            throw new Error(\"Must specify 'steps' to take asynchronously\");\r\n        }\r\n\r\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\r\n        var testMethod = (assert) => {\r\n            var done = assert.async();\r\n\r\n            // Save off the instance of the currently running suite.\r\n            TestClass.currentTestClass = this;\r\n\r\n            // Run the test.\r\n            try {\r\n                this._testStarting();\r\n\r\n                var steps = testInfo.steps;\r\n                var trigger = () => {\r\n                    if (steps.length) {\r\n                        var step = steps.shift();\r\n\r\n                        // The callback which activates the next test step. \r\n                        var nextTestStepTrigger = () => {\r\n                            setTimeout(() => {\r\n                                trigger();\r\n                            }, testInfo.stepDelay);\r\n                        };\r\n\r\n                        // There 2 types of test steps - simple and polling.\r\n                        // Upon completion of the simple test step the next test step will be called.\r\n                        // In case of polling test step the next test step is passed to the polling test step, and\r\n                        // it is responsibility of the polling test step to call the next test step.\r\n                        try {\r\n                            if (step[TestClass.isPollingStepFlag]) {\r\n                                step.call(this, nextTestStepTrigger);\r\n                            } else {\r\n                                step.call(this);\r\n                                nextTestStepTrigger.call(this);\r\n                            }\r\n                        } catch (e) {\r\n                            this._testCompleted();\r\n                            Assert.ok(false, e.toString());\r\n\r\n                            // done is QUnit callback indicating the end of the test\r\n                            done();\r\n\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        this._testCompleted();\r\n\r\n                        // done is QUnit callback indicating the end of the test\r\n                        done();\r\n                    }\r\n                };\r\n\r\n                trigger();\r\n            } catch (ex) {\r\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\r\n                this._testCompleted(true);\r\n\r\n                // done is QUnit callback indicating the end of the test\r\n                done();\r\n            }\r\n        };\r\n\r\n        // Register the test with QUnit\r\n        QUnit.test(testInfo.name, testMethod);\r\n    }\r\n\r\n    /** Register a Javascript unit testcase. */\r\n    public testCase(testInfo: TestCase) {\r\n        if (!testInfo.name) {\r\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\r\n        }\r\n\r\n        if (!testInfo.test) {\r\n            throw new Error(\"Must specify 'test' method in testInfo context in registerTestcase call\");\r\n        }\r\n\r\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\r\n        var testMethod = () => {\r\n            // Save off the instance of the currently running suite.\r\n            TestClass.currentTestClass = this;\r\n\r\n            // Run the test.\r\n            try {\r\n                this._testStarting();\r\n\r\n                testInfo.test.call(this);\r\n\r\n                this._testCompleted();\r\n            }\r\n            catch (ex) {\r\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\r\n                this._testCompleted(true);\r\n            }\r\n        };\r\n\r\n        // Register the test with QUnit\r\n        test(testInfo.name, testMethod);\r\n    }\r\n\r\n    /** Called when the test is starting. */\r\n    private _testStarting() {\r\n        // Initialize the sandbox similar to what is done in sinon.js \"test()\" override. See note on class.\r\n        var config = (<any>sinon).getConfig(sinon.config);\r\n        config.useFakeTimers = this.useFakeTimers;\r\n        config.useFakeServer = this.useFakeServer;\r\n\r\n        config.injectInto = config.injectIntoThis && this || config.injectInto;\r\n        this.sandbox = sinon.sandbox.create(config);\r\n        this.server = this.sandbox.server;\r\n\r\n        // Allow the derived class to perform test initialization.\r\n        this.testInitialize();\r\n    }\r\n\r\n    /** Called when the test is completed. */\r\n    private _testCompleted(failed?: boolean) {\r\n        if (failed) {\r\n            // Just cleanup the sandbox since the test has already failed.\r\n            this.sandbox.restore();\r\n        }\r\n        else {\r\n            // Verify the sandbox and restore.\r\n            (<any>this.sandbox).verifyAndRestore();\r\n        }\r\n\r\n        this.testCleanup();\r\n\r\n        // Clear the instance of the currently running suite.\r\n        TestClass.currentTestClass = null;\r\n    }\r\n\r\n    /**** Sinon methods and properties ***/\r\n\r\n    // These methods and properties are injected by Sinon and will override the implementation here.\r\n    // These are here purely to make typescript happy.\r\n    public clock: SinonFakeTimers;\r\n    public server: SinonFakeServer;\r\n    public sandbox: SinonSandbox;\r\n\r\n    /** Creates an anonymous function that records arguments, this value, exceptions and return values for all calls. */\r\n    public spy(): SinonSpy;\r\n    /** Spies on the provided function */\r\n    public spy(funcToWrap: Function): SinonSpy;\r\n    /** Creates a spy for object.methodName and replaces the original method with the spy. The spy acts exactly like the original method in all cases. The original method can be restored by calling object.methodName.restore(). The returned spy is the function object which replaced the original method. spy === object.method. */\r\n    public spy(object: any, methodName: string, func?: Function): SinonSpy;\r\n    public spy(...args: any[]): SinonSpy { return null; }\r\n\r\n    /** Creates an anonymous stub function. */\r\n    public stub(): SinonStub;\r\n    /** Stubs all the object's methods. */\r\n    public stub(object: any): SinonStub;\r\n    /** Replaces object.methodName with a func, wrapped in a spy. As usual, object.methodName.restore(); can be used to restore the original method. */\r\n    public stub(object: any, methodName: string, func?: Function): SinonStub;\r\n    public stub(...args: any[]): SinonStub { return null; }\r\n\r\n    /** Creates a mock for the provided object.Does not change the object, but returns a mock object to set expectations on the object's methods. */\r\n    public mock(object: any): SinonMock { return null; }\r\n\r\n    /**** end: Sinon methods and properties ***/\r\n\r\n    /** Sends a JSON response to the provided request.\r\n     * @param request The request to respond to.\r\n     * @param data Data to respond with.\r\n     * @param errorCode Optional error code to send with the request, default is 200\r\n    */\r\n    public sendJsonResponse(request: SinonFakeXMLHttpRequest, data: any, errorCode?: number) {\r\n        if (errorCode === undefined) {\r\n            errorCode = 200;\r\n        }\r\n\r\n        request.respond(\r\n            errorCode,\r\n            { \"Content-Type\": \"application/json\" },\r\n            JSON.stringify(data));\r\n    }\r\n\r\n    protected setUserAgent(userAgent: string) {\r\n        Object.defineProperty(window.navigator, 'userAgent',\r\n            {\r\n                configurable: true,\r\n                get: function () {\r\n                    return userAgent;\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n// Configure Sinon\r\nsinon.assert.fail = function (msg?) {\r\n    Assert.ok(false, msg);\r\n};\r\n\r\nsinon.assert.pass = function (assertion) {\r\n    Assert.ok(assertion, \"sinon assert\");\r\n};\r\n\r\nsinon.config = {\r\n    injectIntoThis: true,\r\n    injectInto: null,\r\n    properties: [\"spy\", \"stub\", \"mock\", \"clock\", \"sandbox\"],\r\n    useFakeTimers: true,\r\n    useFakeServer: true\r\n};\r\n","/// <reference path=\"../External/qunit.d.ts\" />\r\n/// <reference path=\"TestClass.ts\" />\r\n\r\nclass PollingAssert {\r\n    /**\r\n    * Starts polling assertion function for a period of time after which it's considered failed.\r\n    * @param {() => boolean} assertionFunctionReturnsBoolean - funciton returning true if condition passes and false if condition fails. Assertion will be done on this function's result.\r\n    * @param {string} assertDescription - message shown with the assertion\r\n    * @param {number} timeoutSeconds - timeout in seconds after which assertion fails\r\n    * @param {number} pollIntervalMs - polling interval in milliseconds\r\n    * @returns {(nextTestStep) => void} callback which will be invoked by the TestClass\r\n    */\r\n    public static createPollingAssert(assertionFunctionReturnsBoolean: () => boolean, assertDescription: string, timeoutSeconds: number = 30, pollIntervalMs: number = 500): (nextTestStep) => void {\r\n        var pollingAssert = (nextTestStep) => {\r\n            var timeout = new Date(new Date().getTime() + timeoutSeconds * 1000);\r\n            var polling = () => {\r\n                if (assertionFunctionReturnsBoolean.apply(this)) {\r\n                    Assert.ok(true, assertDescription);\r\n                    nextTestStep();\r\n                } else if (timeout < new Date()) {\r\n                    Assert.ok(false, \"assert didn't succeed for \" + timeout + \" seconds: \" + assertDescription);\r\n                    nextTestStep();\r\n                } else {\r\n                    setTimeout(polling, pollIntervalMs);\r\n                }\r\n            }\r\n            setTimeout(polling, pollIntervalMs);\r\n        }\r\n\r\n        pollingAssert[TestClass.isPollingStepFlag] = true;\r\n\r\n        return pollingAssert;\r\n    }\r\n}\r\n","/// <reference path=\"../External/sinon.d.ts\" />\r\n/// <reference path=\"../External/qunit.d.ts\" />\r\n/// <reference path=\"Assert.ts\" />\r\n/// <reference path=\"PollingAssert.ts\" />\r\n/// <reference path=\"TestClass.ts\" />\r\n/// <reference path=\"TestCase.ts\" />","\"use strict\";\r\n\r\n/**\r\n * Telemety item supported in Core\r\n */\r\nexport interface ITelemetryItem {\r\n    /**\r\n     * Unique name of the telemetry item\r\n     */ \r\n    name: string;\r\n\r\n    /**\r\n     * Timestamp when item was sent\r\n     */ \r\n    timestamp: Date;\r\n\r\n    /**\r\n     * Telemetry type\r\n     */ \r\n    baseType : string;\r\n\r\n    /**\r\n     * Identifier of the resource that uniquely identifies which resource data is sent to\r\n     */ \r\n    instrumentationKey: string;\r\n\r\n    /**\r\n     * System context properties of the telemetry item, example: ip address, city etc\r\n     */ \r\n    sytemProperties?: { [key: string]: any };\r\n\r\n    /**\r\n     * Telemetry properties pertaining to domain about which data is being captured. Example, duration, referrerUri for browser page\r\n     * This is standard set by domain\r\n     */\r\n    domainProperties?: { [key: string]: any };\r\n\r\n\r\n    /**\r\n     * Custom properties to be captured about the telemetry item\r\n     */\r\n    customProperties?: { [key: string]: any };\r\n}","\"use strict\";\r\n\r\n/**\r\n * Configuration provided to SDK core\r\n */\r\nexport interface IConfiguration {\r\n\r\n    /**\r\n    * Instrumentation key of resource\r\n    */\r\n    instrumentationKey: string; // todo: update later for multi-tenant?\r\n    \r\n    /**\r\n    * Endpoint where telemetry data is sent\r\n    */\r\n    endpointUrl: string;\r\n\r\n    /**\r\n    * Extensions loaded in SDK\r\n    */\r\n    extensions: { [key: string]: any }; // extension configs\r\n}","/// <reference path=\"./ITelemetryItem.ts\" />\r\n/// <reference path=\"./IConfiguration.ts\" />\r\n\r\n\"use strict\";\r\n\r\nimport { ITelemetryItem } from \"./ITelemetryItem\";\r\nimport { IConfiguration } from \"./IConfiguration\";\r\n\r\n/**\r\n * Configuration provided to SDK core\r\n */\r\nexport interface ITelemetryPlugin {\r\n    /**\r\n    * Call back for telemetry processing before it it is sent\r\n    */\r\n    processTelemetry: (env: ITelemetryItem) => void;\r\n\r\n    /**\r\n    * Extensions loaded in SDK\r\n    */\r\n    start: (config: IConfiguration) => void;\r\n\r\n    /**\r\n    * Extension name\r\n    */\r\n    identifier: string;\r\n\r\n    /**\r\n    * Set next extension for telemetry processing\r\n    */\r\n    setNextPlugin: (next: ITelemetryPlugin) => void;\r\n\r\n    /**\r\n    * Priority of the extension\r\n    */\r\n    priority: number;\r\n}","import { ITelemetryPlugin } from \"./ITelemetryPlugin\";\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * Provides data transmission capabilities\r\n */\r\nexport interface IChannelControls extends ITelemetryPlugin {\r\n\r\n    /**\r\n     * Pause sending data\r\n     */        \r\n    pause(): void;\r\n\r\n    /**\r\n     * Resume sending data\r\n     */\r\n    resume(): void;\r\n\r\n    /**\r\n     * Send data in buffer immediately\r\n     */\r\n    flush(): void;\r\n\r\n    /**\r\n     * Tear down transmission pipeline\r\n     */\r\n    teardown(): void;\r\n}\r\n\r\nexport const MinChannelPriorty: number = 100;","import { ITelemetryItem } from \"./ITelemetryItem\";\r\nimport { IChannelControls } from \"./IChannelControls\";\r\nimport { ITelemetryPlugin } from \"./ITelemetryPlugin\";\r\nimport { IConfiguration } from \"./IConfiguration\";\r\n\r\n\"use strict\";\r\n\r\nexport interface IAppInsightsCore {\r\n\r\n    /*\r\n    * Config object used to initialize AppInsights\r\n    */\r\n    config: IConfiguration;\r\n\r\n    /*\r\n    * Initialization queue. Contains functions to run when appInsights initializes\r\n    */        \r\n    initialize(config: IConfiguration, extensions: ITelemetryPlugin[]): void;\r\n\r\n    /*\r\n    * Get transmission controls for controlling transmission behavior\r\n    */\r\n    getTransmissionControl(): IChannelControls;\r\n\r\n    /*\r\n    * Core track API\r\n    */\r\n    track(telemetryItem: ITelemetryItem);\r\n}\r\n\r\nexport interface Snippet {\r\n    queue: Array<() => void>;\r\n    config: IConfiguration;\r\n    extensions: ITelemetryPlugin[];\r\n}","\"use strict\";\r\n\r\nexport class CoreUtils {\r\n    public static isNullOrUndefined(input: any) : boolean {\r\n        return input === null || input === undefined;\r\n    }\r\n}","import { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { ITelemetryPlugin } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { IChannelControls, MinChannelPriorty } from \"../JavaScriptSDK.Interfaces/IChannelControls\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\n\r\n\"use strict\";\r\n\r\nexport class AppInsightsCore implements IAppInsightsCore {\r\n    public config: IConfiguration;\r\n    public queue: (() => void)[];\r\n    public static defaultConfig: IConfiguration;\r\n\r\n    private _extensions: Array<ITelemetryPlugin>;\r\n\r\n    constructor() {\r\n        this._extensions = new Array<ITelemetryPlugin>();\r\n    }\r\n\r\n    initialize(config: IConfiguration, extensions: ITelemetryPlugin[], queue?: (() => void)[]): void {\r\n        \r\n        if (!extensions || extensions.length === 0) {\r\n            // throw error\r\n            throw Error(\"At least one sender channel is required\");\r\n        }\r\n        \r\n        if (!config || config.endpointUrl === null || config.instrumentationKey === null) {\r\n            // throw error\r\n        }\r\n\r\n        this.config = config;\r\n\r\n        // Initial validation\r\n        extensions.forEach((extension: ITelemetryPlugin) => {\r\n            if (extension.setNextPlugin === null || extension.processTelemetry === null || extension.identifier === null) {\r\n                // Todo: throw detailed error\r\n                throw Error(\"Invalid state\");\r\n            }\r\n        });        \r\n\r\n        this._extensions = extensions.sort((extA, extB) => {\r\n            return extA.priority > extB.priority ? -1 : 1;\r\n        });\r\n\r\n        for (let idx = 0; idx < this._extensions.length - 2; idx++) {\r\n            this._extensions[idx].setNextPlugin(this._extensions[idx + 1]); // set next plugin\r\n        }\r\n\r\n        this._extensions.forEach(ext => ext.start(this.config)); // initialize\r\n\r\n        // get defaults for configuration values as applicable\r\n    }\r\n\r\n\r\n    getTransmissionControl(): IChannelControls {\r\n        for (let i = 0; i < this._extensions.length; i++) {\r\n            if (this._extensions[i].priority >= MinChannelPriorty) {\r\n                let firstChannel = <any>this._extensions[i];\r\n                return firstChannel as IChannelControls; // return first channel in list\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    track(telemetryItem: ITelemetryItem) {\r\n        if (telemetryItem === null) {\r\n            // throw error\r\n            throw Error(\"Invalid telemetry item\");\r\n        }\r\n\r\n        // do base validation before sending it through the pipeline        \r\n        this._validateTelmetryItem(telemetryItem);        \r\n\r\n        // invoke any common telemetry processors before sending through pipeline\r\n\r\n        this._extensions[0].processTelemetry(telemetryItem); // pass on to first extension\r\n    }\r\n\r\n    private _validateTelmetryItem(telemetryItem: ITelemetryItem) {\r\n\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.name)) {\r\n            throw Error(\"telemetry name required\");\r\n        }\r\n\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.timestamp)) {\r\n            throw Error(\"telemetry timestamp required\");\r\n        }\r\n\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.baseType)) {\r\n            throw Error(\"telemetry baseType required\");\r\n        }\r\n\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.instrumentationKey)) {\r\n            throw Error(\"telemetry instrumentationKey required\");\r\n        }\r\n    }\r\n}","/// <reference path=\"../TestFramework/Common.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK/AppInsightsCore.ts\" />\r\n/// <reference path=\"../../applicationinsights-core.ts\" />\r\n\r\nimport { IAppInsightsCore, IConfiguration, ITelemetryPlugin, IChannelControls, ITelemetryItem, MinChannelPriorty } from \"../../applicationinsights-core\"\r\nimport { AppInsightsCore } from \"../../JavaScriptSDK/AppInsightsCore\";\r\n\r\nexport class ApplicationInsightsCoreTests extends TestClass {\r\n\r\n    public testInitialize() {\r\n        super.testInitialize();\r\n    }\r\n\r\n    public testCleanup() {\r\n        super.testCleanup();\r\n    }\r\n\r\n    public registerTests() {\r\n\r\n        this.testCase({\r\n            name: \"ApplicationInsightsCore: Validates input\",\r\n            test: () => {\r\n\r\n                let telemetryPlugin = new TestSamplingPlugin();\r\n                                \r\n                let appInsightsCore: AppInsightsCore;\r\n                appInsightsCore = new AppInsightsCore();\r\n                try {                    \r\n                    appInsightsCore.initialize(null, [telemetryPlugin]);\r\n                } catch (error) {\r\n                    Assert.ok(true, \"Validates configuration\");                    \r\n                }\r\n\r\n                let config2 : IConfiguration = {\r\n                        endpointUrl: \"https://dc.services.visualstudio.com/v2/track\",\r\n                        instrumentationKey: \"40ed4f60-2a2f-4f94-a617-22b20a520864\",\r\n                        extensions: {}\r\n                };\r\n\r\n                try {                    \r\n                    appInsightsCore.initialize(config2, null);\r\n                } catch (error) {\r\n                    Assert.ok(true, \"Validates extensions are provided\");                    \r\n                }\r\n\r\n                Assert.ok(false);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nclass TestSamplingPlugin implements ITelemetryPlugin {\r\n    public processTelemetry: (env: ITelemetryItem) => void;\r\n    public start: (config: IConfiguration) => void;\r\n    public identifier: string = \"AzureSamplingPlugin\";\r\n    public setNextPlugin: (next: ITelemetryPlugin) => void;\r\n    public priority: number = 5;\r\n    private samplingPercentage;\r\n    private nexttPlugin: ITelemetryPlugin;\r\n\r\n\r\n    constructor() {\r\n        this.processTelemetry = this._processTelemetry.bind(this);\r\n        this.start = this._start.bind(this);\r\n        this.setNextPlugin = this._setNextPlugin.bind(this);\r\n    }\r\n\r\n    private _processTelemetry(env: ITelemetryItem) {\r\n        if (!env) {\r\n            throw Error(\"Invalid telemetry object\");\r\n        }\r\n\r\n        if (!env.domainProperties) {\r\n            throw Error(\"Need domain properties specified\");\r\n        }\r\n    }\r\n\r\n    private _start(config: IConfiguration) {\r\n        if (!config || !config.extensions[this.identifier]) {\r\n            throw Error(\"required configuration missing\");            \r\n        }\r\n\r\n        let pluginConfig = config.extensions[this.identifier];\r\n        this.samplingPercentage = pluginConfig.samplingPercentage;\r\n    }\r\n\r\n    private _setNextPlugin(next: ITelemetryPlugin) : void {\r\n        this.nexttPlugin = next;\r\n    }\r\n}\r\n\r\nnew ApplicationInsightsCoreTests().registerTests();"]}