{"version":3,"file":"properties.tests.js","sourceRoot":"","sources":["../TestFramework/Assert.ts","../TestFramework/TestCase.ts","../TestFramework/TestClass.ts","../../Interfaces/Context/ISession.ts","../../Context/Session.ts","../../Interfaces/Context/IApplication.ts","../../Context/Application.ts","../../Interfaces/Context/IDevice.ts","../../Context/Device.ts","../../Interfaces/Context/IInternal.ts","../../Interfaces/ITelemetryConfig.ts","../../Context/Internal.ts","../../Interfaces/Context/ILocation.ts","../../Context/Location.ts","../../Interfaces/Context/IOperation.ts","../../Context/Operation.ts","../../Interfaces/Context/IUser.ts","../../Context/User.ts","../../HashCodeScoreGenerator.ts","../../SamplingScoreGenerator.ts","../../Interfaces/Context/ISample.ts","../../Context/Sample.ts","../../Interfaces/ITelemetryContext.ts","../../Interfaces/IPropertiesPlugin.ts","../../PropertiesPlugin.ts","properties.tests.ts","../TestFramework/PollingAssert.ts","../TestFramework/Common.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../External/qunit.d.ts\" />\r\n\r\n/** Wrapper around QUnit asserts. This class has two purposes:\r\n * - Make Assertion methods easy to discover.\r\n * - Make them consistent with XUnit assertions in the order of the actual and expected parameter values.\r\n */\r\nclass Assert {\r\n    /**\r\n    * A deep recursive comparison assertion, working on primitive types, arrays, objects, \r\n    * regular expressions, dates and functions.\r\n    *\r\n    * The deepEqual() assertion can be used just like equal() when comparing the value of \r\n    * objects, such that { key: value } is equal to { key: value }. For non-scalar values, \r\n    * identity will be disregarded by deepEqual.\r\n    *\r\n    * @param expected Known comparison value\r\n    * @param actual Object or Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static deepEqual(expected: any, actual: any, message?: string): any {\r\n        return deepEqual(actual, expected, message);\r\n    }\r\n\r\n    /** \r\n    * A non-strict comparison assertion, roughly equivalent to JUnit assertEquals.\r\n    *\r\n    * The equal assertion uses the simple comparison operator (==) to compare the actual \r\n    * and expected arguments. When they are equal, the assertion passes: any; otherwise, it fails. \r\n    * When it fails, both actual and expected values are displayed in the test result, \r\n    * in addition to a given message.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static equal(expected: any, actual: any, message?: string): any {\r\n        return equal(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * An inverted deep recursive comparison assertion, working on primitive types, \r\n    * arrays, objects, regular expressions, dates and functions.\r\n    *\r\n    * The notDeepEqual() assertion can be used just like equal() when comparing the \r\n    * value of objects, such that { key: value } is equal to { key: value }. For non-scalar \r\n    * values, identity will be disregarded by notDeepEqual.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Object or Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static notDeepEqual(expected: any, actual: any, message?: string): any {\r\n        return notDeepEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * A non-strict comparison assertion, checking for inequality.\r\n    *\r\n    * The notEqual assertion uses the simple inverted comparison operator (!=) to compare \r\n    * the actual and expected arguments. When they aren't equal, the assertion passes: any; \r\n    * otherwise, it fails. When it fails, both actual and expected values are displayed \r\n    * in the test result, in addition to a given message.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static notEqual(expected: any, actual: any, message?: string): any {\r\n        return notEqual(actual, expected, message);\r\n    }\r\n\r\n    public static notPropEqual(expected: any, actual: any, message?: string): any {\r\n        return notPropEqual(actual, expected, message);\r\n    }\r\n\r\n    public static propEqual(expected: any, actual: any, message?: string): any {\r\n        return propEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * A non-strict comparison assertion, checking for inequality.\r\n    *\r\n    * The notStrictEqual assertion uses the strict inverted comparison operator (!==) \r\n    * to compare the actual and expected arguments. When they aren't equal, the assertion \r\n    * passes: any; otherwise, it fails. When it fails, both actual and expected values are \r\n    * displayed in the test result, in addition to a given message.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static notStrictEqual(expected: any, actual: any, message?: string): any {\r\n        return notStrictEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * A boolean assertion, equivalent to CommonJS's assert.ok() and JUnit's assertTrue(). \r\n    * Passes if the first argument is truthy.\r\n    *\r\n    * The most basic assertion in QUnit, ok() requires just one argument. If the argument \r\n    * evaluates to true, the assertion passes; otherwise, it fails. If a second message \r\n    * argument is provided, it will be displayed in place of the result.\r\n    * \r\n    * @param state Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static ok(state: any, message?: string): any {\r\n        return ok(state, message);\r\n    }\r\n\r\n    /**\r\n    * A strict type and value comparison assertion.\r\n    *\r\n    * The strictEqual() assertion provides the most rigid comparison of type and value with \r\n    * the strict equality operator (===)\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static strictEqual(expected: any, actual: any, message?: string): any {\r\n        return strictEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * Assertion to test if a callback throws an exception when run.\r\n    * \r\n    * When testing code that is expected to throw an exception based on a specific set of \r\n    * circumstances, use throws() to catch the error object for testing and comparison.\r\n    * \r\n    * @param block Function to execute\r\n    * @param expected Error Object to compare\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static throws(block: () => any, expected: any, message?: string): any;\r\n\r\n    /**\r\n    * @param block Function to execute\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static throws(block: () => any, message?: string): any;\r\n\r\n    public static throws(block: () => any, expected?: any, message?: string): any {\r\n        return throws(block, expected, message);\r\n    }\r\n}","\r\n/** Defines a test case */\r\nclass TestCase {\r\n    /** Name to use for the test case */\r\n    public name: string;\r\n\r\n    /** Test case method */\r\n    public test: () => void;\r\n}\r\n\r\n\r\n/** Defines a test case */\r\ninterface TestCaseAsync {\r\n    /** Name to use for the test case */\r\n    name: string;\r\n\r\n    /** time to wait after pre before invoking post and calling start() */\r\n    stepDelay: number;\r\n\r\n    /** async steps */\r\n    steps: Array<() => void>;\r\n}","/// <reference path=\"../External/sinon.d.ts\" />\r\n/// <reference path=\"../External/qunit.d.ts\" />\r\n/// <reference path=\"Assert.ts\" />\r\n/// <reference path=\"./TestCase.ts\"/>\r\n\r\nclass TestClass {\r\n\r\n    constructor(name?: string) {\r\n        QUnit.module(name);\r\n    }\r\n\r\n    public static isPollingStepFlag = \"isPollingStep\";\r\n\r\n    /** The instance of the currently running suite. */\r\n    public static currentTestClass: TestClass;\r\n\r\n    /** Turns on/off sinon's syncronous implementation of setTimeout. On by default. */\r\n    public useFakeTimers: boolean = true;\r\n\r\n    /** Turns on/off sinon's fake implementation of XMLHttpRequest. On by default. */\r\n    public useFakeServer: boolean = true;\r\n\r\n    /** Method called before the start of each test method */\r\n    public testInitialize() {\r\n    }\r\n\r\n    /** Method called after each test method has completed */\r\n    public testCleanup() {\r\n    }\r\n\r\n    /** Method in which test class intances should call this.testCase(...) to register each of this suite's tests. */\r\n    public registerTests() {\r\n    }\r\n\r\n    /** Register an async Javascript unit testcase. */\r\n    public testCaseAsync(testInfo: TestCaseAsync) {\r\n        if (!testInfo.name) {\r\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\r\n        }\r\n\r\n        if (isNaN(testInfo.stepDelay)) {\r\n            throw new Error(\"Must specify 'stepDelay' period between pre and post\");\r\n        }\r\n\r\n        if (!testInfo.steps) {\r\n            throw new Error(\"Must specify 'steps' to take asynchronously\");\r\n        }\r\n\r\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\r\n        var testMethod = (assert) => {\r\n            var done = assert.async();\r\n\r\n            // Save off the instance of the currently running suite.\r\n            TestClass.currentTestClass = this;\r\n\r\n            // Run the test.\r\n            try {\r\n                this._testStarting();\r\n\r\n                var steps = testInfo.steps;\r\n                var trigger = () => {\r\n                    if (steps.length) {\r\n                        var step = steps.shift();\r\n\r\n                        // The callback which activates the next test step. \r\n                        var nextTestStepTrigger = () => {\r\n                            setTimeout(() => {\r\n                                trigger();\r\n                            }, testInfo.stepDelay);\r\n                        };\r\n\r\n                        // There 2 types of test steps - simple and polling.\r\n                        // Upon completion of the simple test step the next test step will be called.\r\n                        // In case of polling test step the next test step is passed to the polling test step, and\r\n                        // it is responsibility of the polling test step to call the next test step.\r\n                        try {\r\n                            if (step[TestClass.isPollingStepFlag]) {\r\n                                step.call(this, nextTestStepTrigger);\r\n                            } else {\r\n                                step.call(this);\r\n                                nextTestStepTrigger.call(this);\r\n                            }\r\n                        } catch (e) {\r\n                            this._testCompleted();\r\n                            Assert.ok(false, e.toString());\r\n\r\n                            // done is QUnit callback indicating the end of the test\r\n                            done();\r\n\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        this._testCompleted();\r\n\r\n                        // done is QUnit callback indicating the end of the test\r\n                        done();\r\n                    }\r\n                };\r\n\r\n                trigger();\r\n            } catch (ex) {\r\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\r\n                this._testCompleted(true);\r\n\r\n                // done is QUnit callback indicating the end of the test\r\n                done();\r\n            }\r\n        };\r\n\r\n        // Register the test with QUnit\r\n        QUnit.test(testInfo.name, testMethod);\r\n    }\r\n\r\n    /** Register a Javascript unit testcase. */\r\n    public testCase(testInfo: TestCase) {\r\n        if (!testInfo.name) {\r\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\r\n        }\r\n\r\n        if (!testInfo.test) {\r\n            throw new Error(\"Must specify 'test' method in testInfo context in registerTestcase call\");\r\n        }\r\n\r\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\r\n        var testMethod = () => {\r\n            // Save off the instance of the currently running suite.\r\n            TestClass.currentTestClass = this;\r\n\r\n            // Run the test.\r\n            try {\r\n                this._testStarting();\r\n\r\n                testInfo.test.call(this);\r\n\r\n                this._testCompleted();\r\n            }\r\n            catch (ex) {\r\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\r\n                this._testCompleted(true);\r\n            }\r\n        };\r\n\r\n        // Register the test with QUnit\r\n        test(testInfo.name, testMethod);\r\n    }\r\n\r\n    /** Called when the test is starting. */\r\n    private _testStarting() {\r\n        // Initialize the sandbox similar to what is done in sinon.js \"test()\" override. See note on class.\r\n        var config = (<any>sinon).getConfig(sinon.config);\r\n        config.useFakeTimers = this.useFakeTimers;\r\n        config.useFakeServer = this.useFakeServer;\r\n\r\n        config.injectInto = config.injectIntoThis && this || config.injectInto;\r\n        this.sandbox = sinon.sandbox.create(config);\r\n        this.server = this.sandbox.server;\r\n\r\n        // Allow the derived class to perform test initialization.\r\n        this.testInitialize();\r\n    }\r\n\r\n    /** Called when the test is completed. */\r\n    private _testCompleted(failed?: boolean) {\r\n        if (failed) {\r\n            // Just cleanup the sandbox since the test has already failed.\r\n            this.sandbox.restore();\r\n        }\r\n        else {\r\n            // Verify the sandbox and restore.\r\n            (<any>this.sandbox).verifyAndRestore();\r\n        }\r\n\r\n        this.testCleanup();\r\n\r\n        // Clear the instance of the currently running suite.\r\n        TestClass.currentTestClass = null;\r\n    }\r\n\r\n    /**** Sinon methods and properties ***/\r\n\r\n    // These methods and properties are injected by Sinon and will override the implementation here.\r\n    // These are here purely to make typescript happy.\r\n    public clock: SinonFakeTimers;\r\n    public server: SinonFakeServer;\r\n    public sandbox: SinonSandbox;\r\n\r\n    /** Creates an anonymous function that records arguments, this value, exceptions and return values for all calls. */\r\n    public spy(): SinonSpy;\r\n    /** Spies on the provided function */\r\n    public spy(funcToWrap: Function): SinonSpy;\r\n    /** Creates a spy for object.methodName and replaces the original method with the spy. The spy acts exactly like the original method in all cases. The original method can be restored by calling object.methodName.restore(). The returned spy is the function object which replaced the original method. spy === object.method. */\r\n    public spy(object: any, methodName: string, func?: Function): SinonSpy;\r\n    public spy(...args: any[]): SinonSpy { return null; }\r\n\r\n    /** Creates an anonymous stub function. */\r\n    public stub(): SinonStub;\r\n    /** Stubs all the object's methods. */\r\n    public stub(object: any): SinonStub;\r\n    /** Replaces object.methodName with a func, wrapped in a spy. As usual, object.methodName.restore(); can be used to restore the original method. */\r\n    public stub(object: any, methodName: string, func?: Function): SinonStub;\r\n    public stub(...args: any[]): SinonStub { return null; }\r\n\r\n    /** Creates a mock for the provided object.Does not change the object, but returns a mock object to set expectations on the object's methods. */\r\n    public mock(object: any): SinonMock { return null; }\r\n\r\n    /**** end: Sinon methods and properties ***/\r\n\r\n    /** Sends a JSON response to the provided request.\r\n     * @param request The request to respond to.\r\n     * @param data Data to respond with.\r\n     * @param errorCode Optional error code to send with the request, default is 200\r\n    */\r\n    public sendJsonResponse(request: SinonFakeXMLHttpRequest, data: any, errorCode?: number) {\r\n        if (errorCode === undefined) {\r\n            errorCode = 200;\r\n        }\r\n\r\n        request.respond(\r\n            errorCode,\r\n            { \"Content-Type\": \"application/json\" },\r\n            JSON.stringify(data));\r\n    }\r\n\r\n    protected setUserAgent(userAgent: string) {\r\n        Object.defineProperty(window.navigator, 'userAgent',\r\n            {\r\n                configurable: true,\r\n                get: function () {\r\n                    return userAgent;\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n// Configure Sinon\r\nsinon.assert.fail = function (msg?) {\r\n    Assert.ok(false, msg);\r\n};\r\n\r\nsinon.assert.pass = function (assertion) {\r\n    Assert.ok(assertion, \"sinon assert\");\r\n};\r\n\r\nsinon.config = {\r\n    injectIntoThis: true,\r\n    injectInto: null,\r\n    properties: [\"spy\", \"stub\", \"mock\", \"clock\", \"sandbox\"],\r\n    useFakeTimers: true,\r\n    useFakeServer: true\r\n};\r\n","export interface ISession {\r\n    /**\r\n    * The session ID.\r\n    */\r\n    id: string;\r\n\r\n    /**  \r\n     * The true if this is the first session  \r\n     */\r\n    isFirst: boolean;\r\n\r\n    /**\r\n     * The date at which this guid was genereated.\r\n     * Per the spec the ID will be regenerated if more than acquisitionSpan milliseconds ellapse from this time.\r\n     */\r\n    acquisitionDate: number;\r\n\r\n    /**\r\n     * The date at which this session ID was last reported.\r\n     * This value should be updated whenever telemetry is sent using this ID.\r\n     * Per the spec the ID will be regenerated if more than renewalSpan milliseconds elapse from this time with no activity.\r\n     */\r\n    renewalDate: number;\r\n}","import { ISession } from '../Interfaces/Context/ISession';\r\nimport {\r\n    Util, DateTimeUtils \r\n} from 'applicationinsights-common';\r\nimport { IDiagnosticLogger, _InternalMessageId, LoggingSeverity, CoreUtils, DiagnosticLogger } from 'applicationinsights-core-js';\r\n\r\nexport interface ISessionConfig {\r\n    sessionRenewalMs: () => number;\r\n    sessionExpirationMs: () => number;\r\n    cookieDomain: () => string;\r\n}\r\n\r\nexport class Session implements ISession {\r\n    /**\r\n     * The session ID.\r\n     */\r\n    public id: string;\r\n\r\n    /**  \r\n     * The true if this is the first session  \r\n     */\r\n    public isFirst: boolean;\r\n\r\n    /**\r\n     * The date at which this guid was genereated.\r\n     * Per the spec the ID will be regenerated if more than acquisitionSpan milliseconds ellapse from this time.\r\n     */\r\n    public acquisitionDate: number;\r\n\r\n    /**\r\n     * The date at which this session ID was last reported.\r\n     * This value should be updated whenever telemetry is sent using this ID.\r\n     * Per the spec the ID will be regenerated if more than renewalSpan milliseconds elapse from this time with no activity.\r\n     */\r\n    public renewalDate: number;\r\n}\r\n\r\nexport class _SessionManager {\r\n\r\n    public static acquisitionSpan = 86400000; // 24 hours in ms\r\n    public static renewalSpan = 1800000; // 30 minutes in ms\r\n    public static cookieUpdateInterval = 60000 // 1 minute in ms\r\n    public automaticSession: Session;\r\n    public config: ISessionConfig;\r\n\r\n    private cookieUpdatedTimestamp: number;\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    constructor(config: ISessionConfig, logger?: IDiagnosticLogger) {\r\n        if(CoreUtils.isNullOrUndefined(logger)) {\r\n            this._logger = new DiagnosticLogger();\r\n        } else {\r\n            this._logger = logger;\r\n        }\r\n\r\n        if (!config) {\r\n            config = <any>{};\r\n        }\r\n\r\n        if (!(typeof config.sessionExpirationMs === \"function\")) {\r\n            config.sessionExpirationMs = () => _SessionManager.acquisitionSpan;\r\n        }\r\n\r\n        if (!(typeof config.sessionRenewalMs === \"function\")) {\r\n            config.sessionRenewalMs = () => _SessionManager.renewalSpan;\r\n        }\r\n\r\n        this.config = config;\r\n\r\n        this.automaticSession = new Session();\r\n    }\r\n\r\n    public update() {\r\n        if (!this.automaticSession.id) {\r\n            this.initializeAutomaticSession();\r\n        }\r\n\r\n        var now = DateTimeUtils.Now();\r\n\r\n        var acquisitionExpired = now - this.automaticSession.acquisitionDate > this.config.sessionExpirationMs();\r\n        var renewalExpired = now - this.automaticSession.renewalDate > this.config.sessionRenewalMs();\r\n\r\n        // renew if acquisitionSpan or renewalSpan has ellapsed\r\n        if (acquisitionExpired || renewalExpired) {\r\n            // update automaticSession so session state has correct id                \r\n            this.automaticSession.isFirst = undefined;\r\n            this.renew();\r\n        } else {\r\n            // do not update the cookie more often than cookieUpdateInterval\r\n            if (!this.cookieUpdatedTimestamp || now - this.cookieUpdatedTimestamp > _SessionManager.cookieUpdateInterval) {\r\n                this.automaticSession.renewalDate = now;\r\n                this.setCookie(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Record the current state of the automatic session and store it in our cookie string format\r\n     *  into the browser's local storage. This is used to restore the session data when the cookie\r\n     *  expires.\r\n     */\r\n    public backup() {\r\n        this.setStorage(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n    }\r\n\r\n    /**\r\n     *  Use ai_session cookie data or local storage data (when the cookie is unavailable) to\r\n     *  initialize the automatic session.\r\n     */\r\n    private initializeAutomaticSession() {\r\n        var cookie = Util.getCookie(this._logger, 'ai_session');\r\n        if (cookie && typeof cookie.split === \"function\") {\r\n            this.initializeAutomaticSessionWithData(cookie);\r\n        } else {\r\n            // There's no cookie, but we might have session data in local storage\r\n            // This can happen if the session expired or the user actively deleted the cookie\r\n            // We only want to recover data if the cookie is missing from expiry. We should respect the user's wishes if the cookie was deleted actively.\r\n            // The User class handles this for us and deletes our local storage object if the persistent user cookie was removed.\r\n            var storage = Util.getStorage(this._logger, 'ai_session');\r\n            if (storage) {\r\n                this.initializeAutomaticSessionWithData(storage);\r\n            }\r\n        }\r\n\r\n        if (!this.automaticSession.id) {\r\n            this.automaticSession.isFirst = true;\r\n            this.renew();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Extract id, aquisitionDate, and renewalDate from an ai_session payload string and\r\n     *  use this data to initialize automaticSession.\r\n     *\r\n     *  @param {string} sessionData - The string stored in an ai_session cookie or local storage backup\r\n     */\r\n    private initializeAutomaticSessionWithData(sessionData: string) {\r\n        var params = sessionData.split(\"|\");\r\n\r\n        if (params.length > 0) {\r\n            this.automaticSession.id = params[0];\r\n        }\r\n\r\n        try {\r\n            if (params.length > 1) {\r\n                var acq = +params[1];\r\n                this.automaticSession.acquisitionDate = +new Date(acq);\r\n                this.automaticSession.acquisitionDate = this.automaticSession.acquisitionDate > 0 ? this.automaticSession.acquisitionDate : 0;\r\n            }\r\n\r\n            if (params.length > 2) {\r\n                var renewal = +params[2];\r\n                this.automaticSession.renewalDate = +new Date(renewal);\r\n                this.automaticSession.renewalDate = this.automaticSession.renewalDate > 0 ? this.automaticSession.renewalDate : 0;\r\n            }\r\n        } catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL,\r\n\r\n                _InternalMessageId.ErrorParsingAISessionCookie,\r\n                \"Error parsing ai_session cookie, session will be reset: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n\r\n        if (this.automaticSession.renewalDate == 0) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING,\r\n                _InternalMessageId.SessionRenewalDateIsZero,\r\n                \"AI session renewal date is 0, session will be reset.\");\r\n        }\r\n    }\r\n\r\n    private renew() {\r\n        var now = DateTimeUtils.Now();\r\n\r\n        this.automaticSession.id = Util.newId();\r\n        this.automaticSession.acquisitionDate = now;\r\n        this.automaticSession.renewalDate = now;\r\n\r\n        this.setCookie(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n\r\n        // If this browser does not support local storage, fire an internal log to keep track of it at this point\r\n        if (!Util.canUseLocalStorage()) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING,\r\n                _InternalMessageId.BrowserDoesNotSupportLocalStorage,\r\n                \"Browser does not support local storage. Session durations will be inaccurate.\");\r\n        }\r\n    }\r\n\r\n    private setCookie(guid: string, acq: number, renewal: number) {\r\n        // Set cookie to expire after the session expiry time passes or the session renewal deadline, whichever is sooner\r\n        // Expiring the cookie will cause the session to expire even if the user isn't on the page\r\n        var acquisitionExpiry = acq + this.config.sessionExpirationMs();\r\n        var renewalExpiry = renewal + this.config.sessionRenewalMs();\r\n        var cookieExpiry = new Date();\r\n        var cookie = [guid, acq, renewal];\r\n\r\n        if (acquisitionExpiry < renewalExpiry) {\r\n            cookieExpiry.setTime(acquisitionExpiry);\r\n        } else {\r\n            cookieExpiry.setTime(renewalExpiry);\r\n        }\r\n\r\n        var cookieDomnain = this.config.cookieDomain ? this.config.cookieDomain() : null;\r\n\r\n        Util.setCookie(this._logger, 'ai_session', cookie.join('|') + ';expires=' + cookieExpiry.toUTCString(), cookieDomnain);\r\n\r\n        this.cookieUpdatedTimestamp = DateTimeUtils.Now();\r\n    }\r\n\r\n    private setStorage(guid: string, acq: number, renewal: number) {\r\n        // Keep data in local storage to retain the last session id, allowing us to cleanly end the session when it expires\r\n        // Browsers that don't support local storage won't be able to end sessions cleanly from the client\r\n        // The server will notice this and end the sessions itself, with loss of accurate session duration\r\n        Util.setStorage(this._logger, 'ai_session', [guid, acq, renewal].join('|'));\r\n    }\r\n}","export interface IApplication {\r\n    /**\r\n     * The application version.\r\n     */\r\n    ver: string;\r\n\r\n    /**\r\n     * The application build version.\r\n     */\r\n    build: string;\r\n}","import { IApplication } from '../Interfaces/Context/IApplication';\r\n\r\nexport class Application implements IApplication {\r\n    /**\r\n     * The application version.\r\n     */\r\n    public ver: string;\r\n\r\n    /**\r\n     * The application build version.\r\n     */\r\n    public build: string;\r\n}","export interface IDevice {\r\n    /**\r\n     * The type for the current device.\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * A device unique ID.\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * The device OEM for the current device.\r\n     */\r\n    oemName: string;\r\n\r\n    /**\r\n     * The device model for the current device.\r\n     */\r\n    model: string;\r\n\r\n    /**\r\n     * The IANA interface type for the internet connected network adapter.\r\n     */\r\n    network: number;\r\n\r\n    /**\r\n     * The application screen resolution.\r\n     */\r\n    resolution: string;\r\n\r\n    /**\r\n     * The current display language of the operating system.\r\n     */\r\n    locale: string;\r\n\r\n    /**\r\n     * The IP address.\r\n     */\r\n    ip: string;\r\n\r\n    /**\r\n     * The device language.\r\n     */\r\n    language: string;\r\n\r\n    /**\r\n     * The OS name.\r\n     */\r\n    os: string;\r\n\r\n    /**\r\n     * The OS version.\r\n     */\r\n    osversion: string;\r\n}","import { IDevice } from '../Interfaces/Context/IDevice';\r\n\r\nexport class Device implements IDevice {\r\n\r\n    /**\r\n     * The type for the current device.\r\n     */\r\n    public type: string;\r\n\r\n    /**\r\n     * A device unique ID.\r\n     */\r\n    public id: string;\r\n\r\n    /**\r\n     * The device OEM for the current device.\r\n     */\r\n    public oemName: string;\r\n\r\n    /**\r\n     * The device model for the current device.\r\n     */\r\n    public model: string;\r\n\r\n    /**\r\n     * The IANA interface type for the internet connected network adapter.\r\n     */\r\n    public network: number;\r\n\r\n    /**\r\n     * The application screen resolution.\r\n     */\r\n    public resolution: string;\r\n\r\n    /**\r\n     * The current display language of the operating system.\r\n     */\r\n    public locale: string;\r\n\r\n    /**\r\n     * The IP address.\r\n     */\r\n    public ip: string;\r\n\r\n    /**\r\n     * The device language.\r\n     */\r\n    public language: string;\r\n\r\n    /**\r\n     * The OS name.\r\n     */\r\n    public os: string;\r\n\r\n    /**\r\n     * The OS version.\r\n     */\r\n    public osversion: string;\r\n\r\n    /**\r\n     * Constructs a new instance of the Device class\r\n     */\r\n    constructor() {\r\n        // don't attempt to fingerprint browsers\r\n        this.id = \"browser\";\r\n\r\n        // Device type is a dimension in our data platform\r\n        // Setting it to 'Browser' allows to separate client and server dependencies/exceptions\r\n        this.type = \"Browser\";\r\n    }\r\n}\r\n","export interface IInternal {\r\n    /**\r\n    * The SDK version used to create this telemetry item.\r\n    */\r\n    sdkVersion: string;\r\n\r\n    /**\r\n     * The SDK agent version.\r\n     */\r\n    agentVersion: string;\r\n}","export interface ITelemetryConfig {\r\n    instrumentationKey: () => string;\r\n    accountId: () => string;\r\n    sessionRenewalMs: () => number;\r\n    sampleRate: () => number;\r\n    sessionExpirationMs: () => number;\r\n    cookieDomain: () => string;\r\n    sdkExtension: () => string;\r\n    isBrowserLinkTrackingEnabled: () => boolean;\r\n    appId: () => string;\r\n}","import { IInternal } from '../Interfaces/Context/IInternal';\r\nimport { ITelemetryConfig } from '../Interfaces/ITelemetryConfig';\r\n\r\nconst Version = \"2.0.1-beta\";\r\n\r\nexport class Internal implements IInternal {\r\n\r\n    /**\r\n     * The SDK version used to create this telemetry item.\r\n     */\r\n    public sdkVersion: string;\r\n\r\n    /**\r\n     * The SDK agent version.\r\n     */\r\n    public agentVersion: string;\r\n\r\n    /**\r\n    * Constructs a new instance of the internal telemetry data class.\r\n    */\r\n    constructor(config: ITelemetryConfig) {\r\n        this.sdkVersion = (config.sdkExtension && config.sdkExtension() ? config.sdkExtension() + \"_\" : \"\") + \"javascript:\" + Version;\r\n    }\r\n}","export interface ILocation {\r\n    /**\r\n     * Client IP address for reverse lookup\r\n     */\r\n    ip: string;\r\n}","import { ILocation } from '../Interfaces/Context/ILocation';\r\n\r\nexport class Location implements ILocation {\r\n\r\n    /**\r\n     * Client IP address for reverse lookup\r\n     */\r\n    public ip: string;\r\n}","export interface IOperation {\r\n    /**\r\n     * Operation id\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * Operation name\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Parent operation id\r\n     */\r\n    parentId: string;\r\n\r\n    /**\r\n     * Root operation id\r\n     */\r\n    rootId: string;\r\n\r\n    /**\r\n     * Synthetic source of the operation\r\n     */\r\n    syntheticSource: string;\r\n}","import { IOperation } from '../Interfaces/Context/IOperation';\r\nimport { Util } from 'applicationinsights-common';\r\n\r\nexport class Operation implements IOperation {\r\n\r\n    public id: string;\r\n    public name: string;\r\n    public parentId: string;\r\n    public rootId: string;\r\n    public syntheticSource: string;\r\n\r\n    constructor() {\r\n        this.id = Util.newId();\r\n        if (window && window.location && window.location.pathname) {\r\n            this.name = window.location.pathname;\r\n        }\r\n    }\r\n}","export interface IUser {\r\n    /**\r\n    * The telemetry configuration.\r\n    */\r\n    config: any;\r\n\r\n    /**\r\n     * The user ID.\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * Authenticated user id\r\n     */\r\n    authenticatedId: string;\r\n\r\n    /**\r\n     * The account ID.\r\n     */\r\n    accountId: string;\r\n\r\n    /**\r\n     * The account acquisition date.\r\n     */\r\n    accountAcquisitionDate: string;\r\n\r\n    /**\r\n     * The user agent string.\r\n     */\r\n    agent: string;\r\n\r\n    /**\r\n     * The store region.\r\n     */\r\n    storeRegion: string;\r\n}\r\n\r\nexport interface IUserContextPlugin {\r\n    setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string, storeInCookie?: boolean);\r\n    clearAuthenticatedUserContext();\r\n}\r\n","import { IUser, IUserContextPlugin } from '../Interfaces/Context/IUser';\r\nimport { ITelemetryConfig } from '../Interfaces/ITelemetryConfig';\r\nimport { Util } from 'applicationinsights-common';\r\nimport { IDiagnosticLogger, _InternalMessageId, LoggingSeverity } from 'applicationinsights-core-js';\r\n\r\nexport class User implements IUser, IUserContextPlugin {\r\n\r\n    static cookieSeparator: string = '|';\r\n    static userCookieName: string = 'ai_user';\r\n    static authUserCookieName: string = 'ai_authUser';\r\n\r\n    /**\r\n     * The telemetry configuration.\r\n     */\r\n    public config: ITelemetryConfig;\r\n\r\n    /**\r\n     * The user ID.\r\n     */\r\n    public id: string;\r\n\r\n    /**\r\n     * Authenticated user id\r\n     */\r\n    public authenticatedId: string;\r\n\r\n    /**\r\n     * The account ID.\r\n     */\r\n    public accountId: string;\r\n\r\n    /**\r\n     * The account acquisition date.\r\n     */\r\n    public accountAcquisitionDate: string;\r\n\r\n    /**\r\n     * The user agent string.\r\n     */\r\n    public agent: string;\r\n\r\n    /**\r\n     * The store region.\r\n     */\r\n    public storeRegion: string;\r\n\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    /**\r\n    * Sets the authenticated user id and the account id in this session.\r\n    *   \r\n    * @param authenticatedUserId {string} - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.\r\n    * @param accountId {string} - An optional string to represent the account associated with the authenticated user.\r\n    */\r\n    public setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string, storeInCookie = false) {\r\n\r\n        // Validate inputs to ensure no cookie control characters.\r\n        var isInvalidInput = !this.validateUserInput(authenticatedUserId) || (accountId && !this.validateUserInput(accountId));\r\n        if (isInvalidInput) {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.SetAuthContextFailedAccountName,\r\n                \"Setting auth user context failed. \" +\r\n                \"User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\",\r\n                true);\r\n            return;\r\n        }\r\n\r\n        // Create cookie string.\r\n        this.authenticatedId = authenticatedUserId;\r\n        var authCookie = this.authenticatedId;\r\n        if (accountId) {\r\n            this.accountId = accountId;\r\n            authCookie = [this.authenticatedId, this.accountId].join(User.cookieSeparator);\r\n        }\r\n\r\n        if (storeInCookie) {\r\n            // Set the cookie. No expiration date because this is a session cookie (expires when browser closed).\r\n            // Encoding the cookie to handle unexpected unicode characters.\r\n            Util.setCookie(this._logger, User.authUserCookieName, encodeURI(authCookie), this.config.cookieDomain());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the authenticated user id and the account id from the user context.\r\n     * @returns {} \r\n     */\r\n    public clearAuthenticatedUserContext() {\r\n        this.authenticatedId = null;\r\n        this.accountId = null;\r\n        Util.deleteCookie(this._logger, User.authUserCookieName);\r\n    }\r\n\r\n    constructor(config: ITelemetryConfig, logger: IDiagnosticLogger) {\r\n        this._logger = logger;\r\n\r\n        //get userId or create new one if none exists\r\n        var cookie = Util.getCookie(this._logger, User.userCookieName);\r\n        if (cookie) {\r\n            var params = cookie.split(User.cookieSeparator);\r\n            if (params.length > 0) {\r\n                this.id = params[0];\r\n            }\r\n        }\r\n\r\n        this.config = config;\r\n\r\n        if (!this.id) {\r\n            this.id = Util.newId();\r\n            var date = new Date();\r\n            var acqStr = Util.toISOStringForIE8(date);\r\n            this.accountAcquisitionDate = acqStr;\r\n            // without expiration, cookies expire at the end of the session\r\n            // set it to 365 days from now\r\n            // 365 * 24 * 60 * 60 * 1000 = 31536000000 \r\n            date.setTime(date.getTime() + 31536000000);\r\n            var newCookie = [this.id, acqStr];\r\n            var cookieDomain = this.config.cookieDomain ? this.config.cookieDomain() : undefined;\r\n\r\n            Util.setCookie(this._logger, User.userCookieName, newCookie.join(User.cookieSeparator) + ';expires=' + date.toUTCString(), cookieDomain);\r\n\r\n            // If we have an ai_session in local storage this means the user actively removed our cookies.\r\n            // We should respect their wishes and clear ourselves from local storage\r\n            Util.removeStorage(this._logger, 'ai_session');\r\n        }\r\n\r\n        // We still take the account id from the ctor param for backward compatibility. \r\n        // But if the the customer set the accountId through the newer setAuthenticatedUserContext API, we will override it.\r\n        this.accountId = config.accountId ? config.accountId() : undefined;\r\n\r\n        // Get the auth user id and account id from the cookie if exists\r\n        // Cookie is in the pattern: <authenticatedId>|<accountId>\r\n        var authCookie = Util.getCookie(this._logger, User.authUserCookieName);\r\n        if (authCookie) {\r\n            authCookie = decodeURI(authCookie);\r\n            var authCookieString = authCookie.split(User.cookieSeparator);\r\n            if (authCookieString[0]) {\r\n                this.authenticatedId = authCookieString[0];\r\n            }\r\n            if (authCookieString.length > 1 && authCookieString[1]) {\r\n                this.accountId = authCookieString[1];\r\n            }\r\n        }\r\n    }\r\n\r\n    private validateUserInput(id: string): boolean {\r\n        // Validate:\r\n        // 1. Id is a non-empty string.\r\n        // 2. It does not contain special characters for cookies.\r\n        if (typeof id !== 'string' ||\r\n            !id ||\r\n            id.match(/,|;|=| |\\|/)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","export class HashCodeScoreGenerator {\r\n    // We're using 32 bit math, hence max value is (2^31 - 1)\r\n    public static INT_MAX_VALUE: number = 2147483647;\r\n\r\n    // (Magic number) DJB algorithm can't work on shorter strings (results in poor distribution\r\n    private static MIN_INPUT_LENGTH: number = 8;\r\n\r\n    public getHashCodeScore(key: string): number {\r\n        var score = this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE;\r\n        return score * 100;\r\n    }\r\n\r\n    public getHashCode(input: string): number {\r\n        if (input == \"\") { return 0; }\r\n\r\n        while (input.length < HashCodeScoreGenerator.MIN_INPUT_LENGTH) {\r\n            input = input.concat(input);\r\n        }\r\n\r\n        // 5381 is a magic number: http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function\r\n        var hash: number = 5381;\r\n\r\n        for (var i: number = 0; i < input.length; ++i) {\r\n            hash = ((hash << 5) + hash) + input.charCodeAt(i);\r\n            // 'hash' is of number type which means 53 bit integer (http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)\r\n            // 'hash & hash' will keep it 32 bit integer - just to make it clearer what the result is.\r\n            hash = hash & hash;\r\n        }\r\n\r\n        return Math.abs(hash);\r\n    }\r\n}","import { HashCodeScoreGenerator } from './HashCodeScoreGenerator';\r\nimport { IEnvelope, ContextTagKeys } from 'applicationinsights-common';\r\n\r\nexport class SamplingScoreGenerator {\r\n    private hashCodeGeneragor: HashCodeScoreGenerator;\r\n\r\n    constructor() {\r\n        this.hashCodeGeneragor = new HashCodeScoreGenerator();\r\n    }\r\n\r\n    public getSamplingScore(envelope: IEnvelope): number {\r\n        var tagKeys: ContextTagKeys = new ContextTagKeys();\r\n        var score: number = 0;\r\n        if (envelope.tags[tagKeys.userId]) {\r\n            score = this.hashCodeGeneragor.getHashCodeScore(envelope.tags[tagKeys.userId]);\r\n        } else if (envelope.tags[tagKeys.operationId]) {\r\n            score = this.hashCodeGeneragor.getHashCodeScore(envelope.tags[tagKeys.operationId]);\r\n        } else {\r\n            // tslint:disable-next-line:insecure-random\r\n            score = Math.random()\r\n        }\r\n\r\n        return score;\r\n    }\r\n}","export interface ISample {\r\n    /**\r\n    * Sample rate\r\n    */\r\n    sampleRate: number;\r\n}","import { SamplingScoreGenerator } from '../SamplingScoreGenerator';\r\nimport { ISample } from '../Interfaces/Context/ISample';\r\nimport { IEnvelope } from 'applicationinsights-common';\r\nimport { ITelemetryItem, IDiagnosticLogger, _InternalMessageId, LoggingSeverity, DiagnosticLogger, CoreUtils } from 'applicationinsights-core-js';\r\n\r\nexport class Sample implements ISample {\r\n    public sampleRate: number;\r\n    private samplingScoreGenerator: SamplingScoreGenerator;\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    // We're using 32 bit math, hence max value is (2^31 - 1)\r\n    public INT_MAX_VALUE: number = 2147483647;\r\n\r\n    constructor(sampleRate: number, logger?: IDiagnosticLogger) {\r\n        if (CoreUtils.isNullOrUndefined(logger)) {\r\n            this._logger = new DiagnosticLogger();\r\n        } else {\r\n            this._logger = logger;\r\n        }\r\n        if (sampleRate > 100 || sampleRate < 0) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING,\r\n                _InternalMessageId.SampleRateOutOfRange,\r\n                \"Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.\",\r\n                { samplingRate: sampleRate }, true);\r\n            this.sampleRate = 100;\r\n        }\r\n\r\n        this.sampleRate = sampleRate;\r\n        this.samplingScoreGenerator = new SamplingScoreGenerator();\r\n    }\r\n\r\n    /**\r\n    * Determines if an envelope is sampled in (i.e. will be sent) or not (i.e. will be dropped).\r\n    */\r\n    public isSampledIn(envelope: ITelemetryItem): boolean {\r\n        // return true as sampling will move to different extension\r\n        return true;\r\n    }\r\n}","import { IApplication } from './Context/IApplication';\r\nimport { IDevice } from './Context/IDevice';\r\nimport { IInternal } from './Context/IInternal';\r\nimport { ILocation } from './Context/ILocation';\r\nimport { IOperation } from './Context/IOperation';\r\nimport { IUser } from './Context/IUser';\r\nimport { ISession } from './Context/ISession';\r\n\r\nexport interface ITelemetryContext {\r\n    /**\r\n    * The object describing a component tracked by this object.\r\n    */\r\n    application: IApplication;\r\n\r\n    /**\r\n     * The object describing a device tracked by this object.\r\n     */\r\n    device: IDevice;\r\n\r\n    /**\r\n    * The object describing internal settings.\r\n    */\r\n    internal: IInternal;\r\n\r\n    /**\r\n     * The object describing a location tracked by this object.\r\n     */\r\n    location: ILocation;\r\n\r\n    /**\r\n     * The object describing a operation tracked by this object.\r\n     */\r\n    operation: IOperation;\r\n\r\n    /**\r\n     * The object describing a user tracked by this object.\r\n     */\r\n    user: IUser;\r\n\r\n    /**\r\n     * The object describing a session tracked by this object.\r\n     */\r\n    session: ISession;\r\n}","import { IUserContextPlugin } from './Context/IUser';\r\n\r\nexport interface IPropertiesPlugin extends IUserContextPlugin {}\r\n","/**\r\n * PropertiesPlugin.ts\r\n * @copyright Microsoft 2018\r\n */\r\n\r\nimport {\r\n    ITelemetryPlugin, IConfiguration, CoreUtils,\r\n    IAppInsightsCore, IPlugin, ITelemetryItem, IDiagnosticLogger\r\n} from 'applicationinsights-core-js';\r\nimport { ContextTagKeys, Util, PageView } from 'applicationinsights-common';\r\nimport { Session, _SessionManager } from './Context/Session';\r\nimport { Application } from './Context/Application';\r\nimport { Device } from './Context/Device';\r\nimport { Internal } from './Context/Internal';\r\nimport { Location } from './Context/Location';\r\nimport { Operation } from './Context/Operation';\r\nimport { User } from './Context/User';\r\nimport { Sample } from './Context/Sample';\r\nimport { ITelemetryConfig } from './Interfaces/ITelemetryConfig';\r\nimport { ITelemetryContext } from './Interfaces/ITelemetryContext';\r\nimport { IPropertiesPlugin } from './Interfaces/IPropertiesPlugin';\r\n\r\nexport default class PropertiesPlugin implements ITelemetryPlugin, ITelemetryContext {\r\n    public priority = 170;\r\n    public identifier = \"AppInsightsPropertiesPlugin\";\r\n    public application: Application; // The object describing a component tracked by this object.\r\n    public device: Device; // The object describing a device tracked by this object.\r\n    public location: Location; // The object describing a location tracked by this object.\r\n    public operation: Operation; // The object describing a operation tracked by this object.\r\n    public user: User; // The object describing a user tracked by this object.\r\n    public internal: Internal;\r\n    public session: Session; // The object describing a session tracked by this object.\r\n    public sample: Sample;\r\n    public _sessionManager: _SessionManager; // The session manager that manages session on the base of cookies.\r\n\r\n    private _nextPlugin: ITelemetryPlugin;\r\n    private _extensionConfig: ITelemetryConfig;\r\n\r\n    initialize(config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[]) {\r\n        let extensionConfig = config.extensionConfig &&\r\n            config.extensionConfig[this.identifier] ?\r\n            config.extensionConfig[this.identifier] : {};\r\n\r\n        this._extensionConfig = {\r\n            instrumentationKey: () => extensionConfig.instrumentationKey,\r\n            accountId: () => extensionConfig.accountId,\r\n            sessionRenewalMs: () => extensionConfig.sessionRenewalMs,\r\n            sampleRate: () => extensionConfig.sampleRate,\r\n            sessionExpirationMs: () => extensionConfig.sessionExpirationMs,\r\n            cookieDomain: () => extensionConfig.cookieDomain,\r\n            sdkExtension: () => extensionConfig.sdkExtension,\r\n            isBrowserLinkTrackingEnabled: () => extensionConfig.isBrowserLinkTrackingEnabled,\r\n            appId: () => extensionConfig.appId\r\n        };\r\n        \r\n        if (typeof window !== 'undefined') {\r\n            this._sessionManager = new _SessionManager(this._extensionConfig, core.logger);\r\n            this.application = new Application();\r\n            this.device = new Device();\r\n            this.internal = new Internal(this._extensionConfig);\r\n            this.location = new Location();\r\n            this.user = new User(this._extensionConfig, core.logger);\r\n            this.operation = new Operation();\r\n            this.session = new Session();\r\n            this.sample = new Sample(this._extensionConfig.sampleRate(), core.logger);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add Part A fields to the event\r\n     * @param event The event that needs to be processed\r\n     */\r\n    processTelemetry(event: ITelemetryItem) {\r\n        if (CoreUtils.isNullOrUndefined(event)) {\r\n            // TODO(barustum): throw an internal event once we have support for internal logging\r\n        } else {\r\n            // if the event is not sampled in, do not bother going through the pipeline\r\n            if (this.sample.isSampledIn(event)) {\r\n                // If the envelope is PageView, reset the internal message count so that we can send internal telemetry for the new page.\r\n                if (event.name === PageView.envelopeType) {\r\n                    // TODO(barustum): resetInternalMessageCount once we have support for internal logging\r\n                    //_InternalLogging.resetInternalMessageCount();\r\n                }\r\n\r\n                if (this.session) {\r\n                    // If customer did not provide custom session id update the session manager\r\n                    if (typeof this.session.id !== \"string\") {\r\n                        this._sessionManager.update();\r\n                    }\r\n                }\r\n\r\n                this._processTelemetryInternal(event);\r\n            }\r\n\r\n            if (!CoreUtils.isNullOrUndefined(this._nextPlugin)) {\r\n                this._nextPlugin.processTelemetry(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the next plugin that comes after this plugin\r\n     * @param nextPlugin The next plugin\r\n     */\r\n    setNextPlugin(nextPlugin: ITelemetryPlugin) {\r\n        this._nextPlugin = nextPlugin;\r\n    }\r\n\r\n    private _processTelemetryInternal(event: ITelemetryItem) {\r\n        let tagsItem: { [key: string]: any } = {};\r\n\r\n        if (this.session) {\r\n            // If customer set id, apply his context; otherwise apply context generated from cookies \r\n            if (typeof this.session.id === \"string\") {\r\n                PropertiesPlugin._applySessionContext(tagsItem, this.session);\r\n            } else {\r\n                PropertiesPlugin._applySessionContext(tagsItem, this._sessionManager.automaticSession);\r\n            }\r\n        }\r\n\r\n        // set part A  fields\r\n        PropertiesPlugin._applyApplicationContext(tagsItem, this.application);\r\n        PropertiesPlugin._applyDeviceContext(tagsItem, this.device);\r\n        PropertiesPlugin._applyInternalContext(tagsItem, this.internal);\r\n        PropertiesPlugin._applyLocationContext(tagsItem, this.location);\r\n        PropertiesPlugin._applySampleContext(tagsItem, this.sample);\r\n        PropertiesPlugin._applyUserContext(tagsItem, this.user);\r\n        PropertiesPlugin._applyOperationContext(tagsItem, this.operation);\r\n        event.tags.push(tagsItem);\r\n    }\r\n\r\n    private static _applySessionContext(tags: { [key: string]: any }, sessionContext: Session) {\r\n        if (sessionContext) {\r\n            var tagKeys: ContextTagKeys = new ContextTagKeys();\r\n            if (typeof sessionContext.id === \"string\") {\r\n                tags[tagKeys.sessionId] = sessionContext.id;\r\n            }\r\n            if (typeof sessionContext.isFirst !== \"undefined\") {\r\n                tags[tagKeys.sessionIsFirst] = sessionContext.isFirst;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _applyApplicationContext(tagsItem: { [key: string]: any }, appContext: Application) {\r\n        if (appContext) {\r\n            var tagKeys: ContextTagKeys = new ContextTagKeys();\r\n\r\n            if (typeof appContext.ver === \"string\") {\r\n                tagsItem[tagKeys.applicationVersion] = appContext.ver;\r\n            }\r\n            if (typeof appContext.build === \"string\") {\r\n                tagsItem[tagKeys.applicationBuild] = appContext.build;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _applyDeviceContext(tagsItem: { [key: string]: any }, deviceContext: Device) {\r\n        var tagKeys: ContextTagKeys = new ContextTagKeys();\r\n\r\n        if (deviceContext) {\r\n            if (typeof deviceContext.id === \"string\") {\r\n                tagsItem[tagKeys.deviceId] = deviceContext.id;\r\n            }\r\n            if (typeof deviceContext.ip === \"string\") {\r\n                tagsItem[tagKeys.deviceIp] = deviceContext.ip;\r\n            }\r\n            if (typeof deviceContext.language === \"string\") {\r\n                tagsItem[tagKeys.deviceLanguage] = deviceContext.language;\r\n            }\r\n            if (typeof deviceContext.locale === \"string\") {\r\n                tagsItem[tagKeys.deviceLocale] = deviceContext.locale;\r\n            }\r\n            if (typeof deviceContext.model === \"string\") {\r\n                tagsItem[tagKeys.deviceModel] = deviceContext.model;\r\n            }\r\n            if (typeof deviceContext.network !== \"undefined\") {\r\n                tagsItem[tagKeys.deviceNetwork] = deviceContext.network;\r\n            }\r\n            if (typeof deviceContext.oemName === \"string\") {\r\n                tagsItem[tagKeys.deviceOEMName] = deviceContext.oemName;\r\n            }\r\n            if (typeof deviceContext.os === \"string\") {\r\n                tagsItem[tagKeys.deviceOS] = deviceContext.os;\r\n            }\r\n            if (typeof deviceContext.osversion === \"string\") {\r\n                tagsItem[tagKeys.deviceOSVersion] = deviceContext.osversion;\r\n            }\r\n            if (typeof deviceContext.resolution === \"string\") {\r\n                tagsItem[tagKeys.deviceScreenResolution] = deviceContext.resolution;\r\n            }\r\n            if (typeof deviceContext.type === \"string\") {\r\n                tagsItem[tagKeys.deviceType] = deviceContext.type;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _applyInternalContext(tagsItem: { [key: string]: any }, internalContext: Internal) {\r\n        if (internalContext) {\r\n            var tagKeys: ContextTagKeys = new ContextTagKeys();\r\n            if (typeof internalContext.agentVersion === \"string\") {\r\n                tagsItem[tagKeys.internalAgentVersion] = internalContext.agentVersion;\r\n            }\r\n            if (typeof internalContext.sdkVersion === \"string\") {\r\n                tagsItem[tagKeys.internalSdkVersion] = internalContext.sdkVersion;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _applyLocationContext(tagsItem: { [key: string]: any }, locationContext: Location) {\r\n        if (locationContext) {\r\n            var tagKeys: ContextTagKeys = new ContextTagKeys();\r\n            if (typeof locationContext.ip === \"string\") {\r\n                tagsItem[tagKeys.locationIp] = locationContext.ip;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _applySampleContext(tagsItem: { [key: string]: any }, sampleContext: Sample) {\r\n        if (sampleContext) {\r\n            tagsItem.sampleRate = sampleContext.sampleRate;\r\n        }\r\n    }\r\n\r\n    private static _applyOperationContext(tagsItem: { [key: string]: any }, operationContext: Operation) {\r\n        if (operationContext) {\r\n            var tagKeys: ContextTagKeys = new ContextTagKeys();\r\n            if (typeof operationContext.id === \"string\") {\r\n                tagsItem[tagKeys.operationId] = operationContext.id;\r\n            }\r\n            if (typeof operationContext.name === \"string\") {\r\n                tagsItem[tagKeys.operationName] = operationContext.name;\r\n            }\r\n            if (typeof operationContext.parentId === \"string\") {\r\n                tagsItem[tagKeys.operationParentId] = operationContext.parentId;\r\n            }\r\n            if (typeof operationContext.rootId === \"string\") {\r\n                tagsItem[tagKeys.operationRootId] = operationContext.rootId;\r\n            }\r\n            if (typeof operationContext.syntheticSource === \"string\") {\r\n                tagsItem[tagKeys.operationSyntheticSource] = operationContext.syntheticSource;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _applyUserContext(tagsItem: { [key: string]: any }, userContext: User) {\r\n        if (userContext) {\r\n            var tagKeys: ContextTagKeys = new ContextTagKeys();\r\n            if (typeof userContext.accountId === \"string\") {\r\n                tagsItem[tagKeys.userAccountId] = userContext.accountId;\r\n            }\r\n            if (typeof userContext.agent === \"string\") {\r\n                tagsItem[tagKeys.userAgent] = userContext.agent;\r\n            }\r\n            if (typeof userContext.id === \"string\") {\r\n                tagsItem[tagKeys.userId] = userContext.id;\r\n            }\r\n            if (typeof userContext.authenticatedId === \"string\") {\r\n                tagsItem[tagKeys.userAuthUserId] = userContext.authenticatedId;\r\n            }\r\n            if (typeof userContext.storeRegion === \"string\") {\r\n                tagsItem[tagKeys.userStoreRegion] = userContext.storeRegion;\r\n            }\r\n        }\r\n    }\r\n}","/// <reference path=\"../TestFramework/TestClass.ts\" />\r\n\r\nimport { AppInsightsCore, IConfiguration, DiagnosticLogger } from \"applicationinsights-core-js\";\r\nimport PropertiesPlugin from \"../../PropertiesPlugin\";\r\nimport { Util } from \"applicationinsights-common\";\r\n\r\nexport class PropertiesTests extends TestClass {\r\n    private properties: PropertiesPlugin;\r\n    private core: AppInsightsCore;\r\n\r\n    public testInitialize() {\r\n        this.core = new AppInsightsCore();\r\n        this.core.logger = new DiagnosticLogger();\r\n        this.properties = new PropertiesPlugin();\r\n    }\r\n\r\n    public testCleanup() {\r\n        this.core = null;\r\n        this.properties = null;\r\n    }\r\n\r\n    public registerTests() {\r\n        this.addUserTests();\r\n    }\r\n\r\n    private addUserTests() {\r\n        this.testCase({\r\n            name: 'User: user context initializes from cookie when possible',\r\n            test: () => {\r\n                // setup\r\n                const id = \"someUserId\";\r\n                var cookieStub = this.sandbox.stub(Util, \"getCookie\", () => id + \"||||\");\r\n\r\n                // Act\r\n                Assert.ok(cookieStub.notCalled, 'Cookie not yet grabbed');\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n                Assert.ok(cookieStub.called, 'Cookie grabbed');\r\n\r\n                // Assert\r\n                Assert.equal(id, this.properties.user.id, 'user id was set from cookie');\r\n            }\r\n        });\r\n\r\n        \r\n        this.testCase({\r\n            name: \"ai_user cookie is set with acq date and year expiration\",\r\n            test: () => {\r\n                // setup\r\n                var actualCookieName: string;\r\n                var actualCookieValue: string;\r\n                var newIdStub = this.sandbox.stub(Util, \"newId\", () => \"newId\");\r\n                var getCookieStub = this.sandbox.stub(Util, \"getCookie\", () => \"\");\r\n                var setCookieStub = this.sandbox.stub(Util, \"setCookie\", (logger, cookieName, cookieValue) => {\r\n                    actualCookieName = cookieName;\r\n                    actualCookieValue = cookieValue;\r\n                });\r\n\r\n                // act\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n\r\n                // verify\r\n                Assert.equal(\"ai_user\", actualCookieName, \"ai_user cookie is set\");\r\n                var cookieValueParts = actualCookieValue.split(';');\r\n\r\n                Assert.equal(2, cookieValueParts.length, \"ai_user cookie value should have actual value and expiration\");\r\n                Assert.equal(2, cookieValueParts[0].split('|').length, \"ai_user cookie value before expiration should include user id and acq date\");\r\n                Assert.equal(\"newId\", cookieValueParts[0].split('|')[0], \"First part of ai_user cookie value should be new user id guid\");\r\n                Assert.equal(new Date().toString(), (new Date(cookieValueParts[0].split('|')[1])).toString(), \"Second part of ai_user cookie should be parsable as date\");\r\n\r\n                var expiration = cookieValueParts[1];\r\n                Assert.equal(true, expiration.substr(0, \"expires=\".length) === \"expires=\", \"ai_user cookie expiration part should start with expires=\");\r\n                var expirationDate = new Date(expiration.substr(\"expires=\".length));\r\n                Assert.equal(true, expirationDate > (new Date), \"ai_user cookie expiration should be in the future\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"ai_user cookie is set with acq date and year expiration\",\r\n            test: () => {\r\n                // setup\r\n                var id = \"userId\"\r\n                var actualCookieName: string;\r\n                var actualCookieValue: string;\r\n                var newIdStub = this.sandbox.stub(Util, \"newId\", () => \"newId\");\r\n                var getCookieStub = this.sandbox.stub(Util, \"getCookie\", () => \"\");\r\n                var setCookieStub = this.sandbox.stub(Util, \"setCookie\", (logger, cookieName, cookieValue) => {\r\n                    actualCookieName = cookieName;\r\n                    actualCookieValue = cookieValue;\r\n                });\r\n\r\n                // act\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n\r\n                // verify\r\n                Assert.equal(\"ai_user\", actualCookieName, \"ai_user cookie is set\");\r\n                var cookieValueParts = actualCookieValue.split(';');\r\n\r\n                Assert.equal(2, cookieValueParts.length, \"ai_user cookie value should have actual value and expiration\");\r\n                Assert.equal(2, cookieValueParts[0].split('|').length, \"ai_user cookie value before expiration should include user id and acq date\");\r\n                Assert.equal(\"newId\", cookieValueParts[0].split('|')[0], \"First part of ai_user cookie value should be new user id guid\");\r\n                Assert.equal(new Date().toString(), (new Date(cookieValueParts[0].split('|')[1])).toString(), \"Second part of ai_user cookie should be parsable as date\");\r\n\r\n                var expiration = cookieValueParts[1];\r\n                Assert.equal(true, expiration.substr(0, \"expires=\".length) === \"expires=\", \"ai_user cookie expiration part should start with expires=\");\r\n                var expirationDate = new Date(expiration.substr(\"expires=\".length));\r\n                Assert.equal(true, expirationDate > (new Date), \"ai_user cookie expiration should be in the future\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"Ctor: auth and account id initialize from cookie\",\r\n            test: () => {\r\n                // setup\r\n                var authId = \"bla@bla.com\";\r\n                var accountId = \"Contoso\";\r\n\r\n                var cookieStub = this.sandbox.stub(Util, \"getCookie\", () => authId + \"|\" + accountId);\r\n\r\n                // act\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n\r\n                // verify\r\n                Assert.equal(authId, this.properties.user.authenticatedId, \"user auth id was set from cookie\");\r\n                Assert.equal(accountId, this.properties.user.accountId, \"user account id was not set from cookie\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"Ctor: auth id initializes from cookie (without account id)\",\r\n            test: () => {\r\n                // setup\r\n                var authId = \"bla@bla.com\";\r\n                var cookieStub = this.sandbox.stub(Util, \"getCookie\", () => authId);\r\n\r\n                // act\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n\r\n                // verify\r\n                Assert.equal(authId, this.properties.user.authenticatedId, \"user auth id was set from cookie\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"Ctor: auth user context handles empty cookie\",\r\n            test: () => {\r\n                // setup\r\n                var cookieStub = this.sandbox.stub(Util, \"getCookie\", () => \"\");\r\n\r\n                // act\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n\r\n                // verify\r\n                Assert.equal(undefined, this.properties.user.authenticatedId, \"user auth id was not set\");\r\n                Assert.equal(undefined, this.properties.user.accountId, \"user account id was not set\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"Ctor: auth user context handles empty cookie with accountId backward compatibility\",\r\n            test: () => {\r\n                // setup\r\n                var config = this.getEmptyConfig();\r\n                config.extensionConfig.AppInsightsPropertiesPlugin.accountId = \"account17\";\r\n\r\n                var cookieStub = this.sandbox.stub(Util, \"getCookie\", () => null);\r\n\r\n                // act\r\n                this.properties.initialize(config, this.core, []);\r\n\r\n                // verify\r\n                Assert.equal(config.extensionConfig.AppInsightsPropertiesPlugin.accountId, this.properties.user.accountId, \"user account id was set from back compat\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"setAuthenticatedUserContext: auth id and account id is set (not in the cookie)\",\r\n            test: () => {\r\n                // setup\r\n                var authAndAccountId = ['bla@bla.com', 'contoso'];\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n                var cookieStub = this.sandbox.stub(Util, \"setCookie\");\r\n\r\n                // act\r\n                this.properties.user.setAuthenticatedUserContext(authAndAccountId[0], authAndAccountId[1]);\r\n\r\n                // verify\r\n                Assert.equal('bla@bla.com', this.properties.user.authenticatedId, \"user auth id was not set\");\r\n                Assert.equal('contoso', this.properties.user.accountId, \"user account id was not set\");\r\n                Assert.equal(cookieStub.notCalled, true, \"cookie was not set\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"setAuthenticatedUserContext: auth user set in cookie without account id\",\r\n            test: () => {\r\n                // setup\r\n                var authAndAccountId = [\"bla@bla.com\"];\r\n                var cookieStub = this.sandbox.stub(Util, \"setCookie\");\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n\r\n                // act\r\n                this.properties.user.setAuthenticatedUserContext(authAndAccountId[0], null, true);\r\n\r\n                // verify\r\n                Assert.equal(authAndAccountId[0], this.properties.user.authenticatedId, \"user auth id was set\");\r\n                Assert.equal(cookieStub.calledWithExactly(this.core.logger, 'ai_authUser', encodeURI(authAndAccountId.join('|')), null), true, \"user auth id and account id cookie was set\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"setAuthenticatedUserContext: auth user and account id set in cookie \",\r\n            test: () => {\r\n                // setup\r\n                var authAndAccountId = ['bla@bla.com', 'contoso'];\r\n                var cookieStub = this.sandbox.stub(Util, \"setCookie\");\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n\r\n                // act\r\n                this.properties.user.setAuthenticatedUserContext(authAndAccountId[0], authAndAccountId[1], true);\r\n\r\n                // verify\r\n                Assert.equal(authAndAccountId[0], this.properties.user.authenticatedId, \"user auth id was set\");\r\n                Assert.equal(cookieStub.calledWithExactly(this.core.logger, 'ai_authUser', encodeURI(authAndAccountId.join('|')), null), true, \"user auth id cookie was set\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"setAuthenticatedUserContext: handles only auth user id correctly\",\r\n            test: () => {\r\n                // setup\r\n                var authAndAccountId = ['bla@bla.com'];\r\n                var cookieStub = this.sandbox.stub(Util, \"setCookie\");\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n\r\n                // act\r\n                this.properties.user.setAuthenticatedUserContext(authAndAccountId[0], null, true);\r\n\r\n                // verify\r\n                Assert.equal(authAndAccountId[0], this.properties.user.authenticatedId, \"user auth id was set\");\r\n                Assert.equal(null, this.properties.user.accountId, \"user account id was not set\");\r\n                Assert.equal(cookieStub.calledWithExactly(this.core.logger, 'ai_authUser', encodeURI(authAndAccountId[0]), null), true, \"user auth id cookie was set\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"setAuthenticatedUserContext: handles null correctly\",\r\n            test: () => {\r\n                // setup\r\n                var cookieStub = this.sandbox.stub(Util, \"setCookie\");\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n                var loggingStub = this.sandbox.stub(this.core.logger, \"throwInternal\");\r\n                cookieStub.reset();\r\n                loggingStub.reset();\r\n\r\n                // act\r\n                this.properties.user.setAuthenticatedUserContext(null);\r\n\r\n                // verify\r\n                Assert.equal(undefined, this.properties.user.authenticatedId, \"user auth id was not set\");\r\n                Assert.equal(undefined, this.properties.user.accountId, \"user account id was not set\");\r\n                Assert.equal(cookieStub.notCalled, true, \"cookie was not set\");\r\n                Assert.equal(loggingStub.calledOnce, true, \"Warning was logged\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"setAuthenticatedUserContext: handles undefined correctly\",\r\n            test: () => {\r\n                // setup\r\n                var cookieStub = this.sandbox.stub(Util, \"setCookie\");\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n                var loggingStub = this.sandbox.stub(this.core.logger, \"throwInternal\");\r\n                cookieStub.reset();\r\n                loggingStub.reset();\r\n\r\n                // act\r\n                this.properties.user.setAuthenticatedUserContext(undefined, undefined);\r\n\r\n                // verify\r\n                Assert.equal(undefined, this.properties.user.authenticatedId, \"user auth id was not set\");\r\n                Assert.equal(undefined, this.properties.user.accountId, \"user account id was not set\");\r\n                Assert.equal(cookieStub.notCalled, true, \"cookie was not set\");\r\n                Assert.equal(loggingStub.calledOnce, true, \"Warning was logged\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"setAuthenticatedUserContext: handles only accountID correctly\",\r\n            test: () => {\r\n                // setup\r\n                var cookieStub = this.sandbox.stub(Util, \"setCookie\");\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n                var loggingStub = this.sandbox.stub(this.core.logger, \"throwInternal\");\r\n                cookieStub.reset();\r\n                loggingStub.reset();\r\n\r\n                // act\r\n                this.properties.user.setAuthenticatedUserContext(undefined, '1234');\r\n\r\n                // verify\r\n                Assert.equal(undefined, this.properties.user.authenticatedId, \"user auth id was not set\");\r\n                Assert.equal(undefined, this.properties.user.accountId, \"user account id was not set\");\r\n                Assert.equal(cookieStub.notCalled, true, \"cookie was not set\");\r\n                Assert.equal(loggingStub.calledOnce, true, \"Warning was logged\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"setAuthenticatedUserContext: handles authId special characters correctly\",\r\n            test: () => {\r\n                // setup\r\n                var authAndAccountId = ['my|||special;id', '1234'];\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n                var cookieStub = this.sandbox.stub(Util, \"setCookie\");\r\n                var loggingStub = this.sandbox.stub(this.core.logger, \"throwInternal\");\r\n\r\n                // act\r\n                this.properties.user.setAuthenticatedUserContext(authAndAccountId[0], authAndAccountId[1], true);\r\n\r\n                // verify\r\n                Assert.equal(undefined, this.properties.user.authenticatedId, \"user auth id was not set\");\r\n                Assert.equal(undefined, this.properties.user.accountId, \"user account id was not set\");\r\n                Assert.equal(cookieStub.notCalled, true, \"cookie was not set\");\r\n                Assert.equal(loggingStub.calledOnce, true, \"Warning was logged\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"setAuthenticatedUserContext: handles accountId special characters correctly\",\r\n            test: () => {\r\n                // setup\r\n                var authAndAccountId = ['myid', '1234 5678'];\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n                this.properties.user.clearAuthenticatedUserContext();\r\n                var cookieStub = this.sandbox.stub(Util, \"setCookie\");\r\n                var loggingStub = this.sandbox.stub(this.core.logger, \"throwInternal\");\r\n\r\n                // act\r\n                this.properties.user.setAuthenticatedUserContext(authAndAccountId[0], authAndAccountId[1]);\r\n\r\n                // verify\r\n                Assert.equal(undefined, this.properties.user.authenticatedId, \"user auth id was not set\");\r\n                Assert.equal(undefined, this.properties.user.accountId, \"user account id was not set\");\r\n                Assert.equal(cookieStub.notCalled, true, \"cookie was not set\");\r\n                Assert.equal(loggingStub.calledOnce, true, \"Warning was logged\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"setAuthenticatedUserContext: handles non-ascii unicode characters correctly\",\r\n            test: () => {\r\n                // setup\r\n                var authAndAccountId = [\"\\u05D0\", \"\\u05D1\"]; // Hebrew characters\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n                var cookieStub = this.sandbox.stub(Util, \"setCookie\");\r\n                var loggingStub = this.sandbox.stub(this.core.logger, \"throwInternal\");\r\n\r\n                // act\r\n                this.properties.user.setAuthenticatedUserContext(authAndAccountId[0], authAndAccountId[1], true);\r\n\r\n                // verify\r\n                Assert.equal(authAndAccountId[0], this.properties.user.authenticatedId, \"user auth id was set\");\r\n                Assert.equal(authAndAccountId[1], this.properties.user.accountId, \"user account id was set\");\r\n                Assert.equal(cookieStub.calledWithExactly(this.core.logger, 'ai_authUser', encodeURI(authAndAccountId.join('|')), null), true, \"user auth id cookie was set\");\r\n                Assert.equal(loggingStub.notCalled, true, \"No warnings\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"clearAuthenticatedUserContext: auth user and account cleared in context and cookie \",\r\n            test: () => {\r\n                // setup\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n                this.properties.user.setAuthenticatedUserContext(\"bla\", \"123\");\r\n                var cookieStub = this.sandbox.stub(Util, \"deleteCookie\");\r\n\r\n                // act\r\n                this.properties.user.clearAuthenticatedUserContext();\r\n\r\n                // verify\r\n                Assert.equal(undefined, this.properties.user.authenticatedId, \"user auth id was cleared\");\r\n                Assert.equal(undefined, this.properties.user.accountId, \"user account id was cleared\");\r\n                Assert.equal(cookieStub.calledWithExactly(this.core.logger, 'ai_authUser'), true, \"cookie was deleted\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"clearAuthenticatedUserContext: works correctly when auth id and account id were never set\",\r\n            test: () => {\r\n                // setup\r\n                this.properties.initialize(this.getEmptyConfig(), this.core, []);\r\n                var cookieStub = this.sandbox.stub(Util, \"deleteCookie\");\r\n\r\n                // act\r\n                this.properties.user.clearAuthenticatedUserContext();\r\n\r\n                // verify\r\n                Assert.equal(undefined, this.properties.user.authenticatedId, \"user auth id was cleared\");\r\n                Assert.equal(undefined, this.properties.user.accountId, \"user account id was cleared\");\r\n                Assert.equal(cookieStub.calledWithExactly(this.core.logger, 'ai_authUser'), true, \"cookie was deleted\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private getEmptyConfig(): IConfiguration {\r\n        return {\r\n            instrumentationKey: 'key',\r\n\r\n            extensionConfig: {\r\n                AppInsightsPropertiesPlugin: {\r\n                    accountId: null,\r\n                    sessionRenewalMs: null,\r\n                    sessionExpirationMs: null,\r\n                    sampleRate: null,\r\n                    endpointUrl: null,\r\n                    cookieDomain: null,\r\n                    emitLineDelimitedJson: null,\r\n                    maxBatchSizeInBytes: null,\r\n                    maxBatchInterval: null,\r\n                    disableTelemetry: null,\r\n                    enableSessionStorageBuffer: null,\r\n                    isRetryDisabled: null,\r\n                    isBeaconApiDisabled: null,\r\n                    sdkExtension: null,\r\n                    isBrowserLinkTrackingEnabled: null,\r\n                    appId: null\r\n                }\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\nexport function runTests() {\r\n    new PropertiesTests().registerTests();\r\n}\r\n","/// <reference path=\"../External/qunit.d.ts\" />\r\n/// <reference path=\"TestClass.ts\" />\r\n\r\nclass PollingAssert {\r\n    /**\r\n    * Starts polling assertion function for a period of time after which it's considered failed.\r\n    * @param {() => boolean} assertionFunctionReturnsBoolean - funciton returning true if condition passes and false if condition fails. Assertion will be done on this function's result.\r\n    * @param {string} assertDescription - message shown with the assertion\r\n    * @param {number} timeoutSeconds - timeout in seconds after which assertion fails\r\n    * @param {number} pollIntervalMs - polling interval in milliseconds\r\n    * @returns {(nextTestStep) => void} callback which will be invoked by the TestClass\r\n    */\r\n    public static createPollingAssert(assertionFunctionReturnsBoolean: () => boolean, assertDescription: string, timeoutSeconds: number = 30, pollIntervalMs: number = 500): (nextTestStep) => void {\r\n        var pollingAssert = (nextTestStep) => {\r\n            var timeout = new Date(new Date().getTime() + timeoutSeconds * 1000);\r\n            var polling = () => {\r\n                if (assertionFunctionReturnsBoolean.apply(this)) {\r\n                    Assert.ok(true, assertDescription);\r\n                    nextTestStep();\r\n                } else if (timeout < new Date()) {\r\n                    Assert.ok(false, \"assert didn't succeed for \" + timeout + \" seconds: \" + assertDescription);\r\n                    nextTestStep();\r\n                } else {\r\n                    setTimeout(polling, pollIntervalMs);\r\n                }\r\n            }\r\n            setTimeout(polling, pollIntervalMs);\r\n        }\r\n\r\n        pollingAssert[TestClass.isPollingStepFlag] = true;\r\n\r\n        return pollingAssert;\r\n    }\r\n}\r\n","/// <reference path=\"../External/sinon.d.ts\" />\r\n/// <reference path=\"../External/qunit.d.ts\" />\r\n/// <reference path=\"Assert.ts\" />\r\n/// <reference path=\"PollingAssert.ts\" />\r\n/// <reference path=\"TestClass.ts\" />\r\n/// <reference path=\"TestCase.ts\" />"]}